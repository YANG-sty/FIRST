# 开发环境配置
#spring.datasource.master-d-b.idle-timeout=600000
#spring.datasource.master-d-b.pool-name= masterPool

#swagger
swagger.host = localhost:8081
# swagger开启
swagger.enable = true


spring.jpa.database=MYSQL
spring.jpa.show-sql=true
# 使用的是 mybatis
#spring.jpa.hibernate.ddl-auto=none
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/yang_zzu?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
#spring.datasource.username=ENC(h0Zo6FeX9CXS/yA0wf9oaw==)
#spring.datasource.password=ENC(7h4Ww/T2UCXl/uEuSZEM2Q==)
#spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Shanghai
spring.jpa.properties.Mybatis.jdbc.time_zone=Asia/Shanghai

# @ConfigurationProperties(prefix = "spring.datasource")
spring.datasource.master-d-b.idle-timeout=600000
spring.datasource.master-d-b.driver-calss-name=com.mysql.jdbc.Driver
spring.datasource.master-d-b.pool-name=masterPool
spring.datasource.master-d-b.jdbc-url=jdbc:mysql://127.0.0.1:3306/yang_zzu?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
spring.datasource.master-d-b.username=root
spring.datasource.master-d-b.password=123456
spring.datasource.master-d-b.max-lifetime=1800000
spring.datasource.master-d-b.maximum-pool-size=2
spring.datasource.master-d-b.min-idle=1

spring.datasource.secend-d-b.idle-timeout=600000
spring.datasource.secend-d-b.driver-calss-name=com.mysql.jdbc.Driver
spring.datasource.secend-d-b.pool-name=secendPool
spring.datasource.secend-d-b.jdbc-url=jdbc:mysql://127.0.0.1:3306/student_test?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
spring.datasource.secend-d-b.username=root
spring.datasource.secend-d-b.password=123456
spring.datasource.secend-d-b.max-lifetime=1800000
spring.datasource.secend-d-b.min-idle=1

spring.data.mongodb.uri=mongodb://first:123456@192.168.44.10:27017/yang_zzu

spring.data.gridfs.host=192.168.44.10
spring.data.gridfs.port=27017
spring.data.gridfs.user=firstFile
spring.data.gridfs.pwd=123456
spring.data.gridfs.dbName=documents-files

spring.cache.type=ehcache

#========================================================== kafka ===============================================================
#以逗号分隔的主机：端口对列表，用于建立与Kafka群集的初始连接。不需要指定所有的的 broker
spring.kafka.bootstrap-servers=192.168.232.100:9092

##################################  producer的配置参数（开始）##################################
#procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
#acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后所在的broker立即宕机，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#可以设置的值为：all, -1, 0, 1
spring.kafka.producer.acks=all
#如果该值大于零时，表示启用重试失败的发送次数,瞬时失败的原因可能包括：元数据信息失效、副本数量不足、超时、位移越界或未知分区等
#消息的重试不会造成消息的重复发送。
spring.kafka.producer.retries=3
#retry.backoff.ms 重试的时间间隔
#spring.

#生产者可用于缓冲等待发送到服务器的记录的内存总字节数，默认值为33554432，32MB
spring.kafka.producer.buffer-memory=33554432
#每当多个记录被发送到同一分区时，生产者将尝试将记录一起批量处理为更少的请求，batch 越小，producer的吞吐量越低
#这有助于提升客户端和服务器上的性能，此配置控制默认批量大小（以字节为单位），默认值为16384 即 16kb
#当多条消息发送到一个分区时，Producer会进行批量发送，这个参数指定了批量消息大小的上限（以字节为单位）。
# 当批量消息达到这个大小时，Producer会一起发送到broker；但即使没有达到这个大小，生产者也会有定时机制来发送消息，避免消息延迟过大。
spring.kafka.producer.batch-size=16384
#linger.ms设置(吞吐量和延时性能),默认是0，当消息发送比较频繁时，增加一些延迟可增加吞吐量和性能。
#这个参数指定producer在发送批量消息前等待的时间，当设置此参数后，即便没有达到批量消息的指定大小(batch-size)，到达时间后生产者也会发送批量消息到broker。
# 默认情况下，生产者的发送消息线程只要空闲了就会发送消息，即便只有一条消息。
# 设置这个参数后，发送线程会等待一定的时间，这样可以批量发送消息增加吞吐量，但同时也会增加延迟。
spring.kafka.producer.properties.linger.ms=50

#max.in.flight.requests.per.connection设置(吞吐量和延时性能),默认值：5，设置为1即表示producer在connection上发送一条消息，
# 至少要等到这条消息被broker确认收到才继续发送下一条，因此是有序的。
#这个参数指定producer在一个TCP connection可同时发送多少条消息到broker并且等待broker响应，设置此参数较高的值可以提高吞吐量，但同时也会增加内存消耗。
# 另外，如果设置过高反而会降低吞吐量，因为批量消息效率降低。设置为1，可以保证发送到broker的顺序和调用send方法顺序一致，即便出现失败重试的情况也是如此。
#注意：当前消息符合at-least-once，自kafka1.0.0以后，为保证消息有序以及exactly once，这个配置可适当调大为5。
spring.kafka.producer.properties.max.in.flight.requests.per.connection=1

#生产者生成的所有数据的压缩类型，此配置接受标准压缩编解码器（'gzip'，'snappy'，'lz4'），
#默认值为producer，推荐使用 lz4
#默认情况下消息是不压缩的，此参数可指定采用何种算法压缩消息，可取值：none,snappy,gzip,lz4。
# snappy压缩算法由Google研发，这种算法在性能和压缩比取得比较好的平衡；
# 相比之下，gzip消耗更多的CPU资源，但是压缩效果也是最好的。通过使用压缩，我们可以节省网络带宽和Kafka存储成本。
spring.kafka.producer.compression-type=lz4
#ID在发出请求时传递给服务器，用于服务器端日志记录
spring.kafka.producer.client-id=
#key的Serializer类，实现类实现了接口org.apache.kafka.common.serialization.Serializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#值的Serializer类，实现类实现了接口org.apache.kafka.common.serialization.Serializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer


################################## consumer的配置参数（开始）##################################
#是否自动提交偏移量，默认是true,为避免出现重复数据和数据丢失，设置为false，然后手动提交偏移量
spring.kafka.consumer.enable-auto-commit=false
#如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
#spring.kafka.consumer.auto-commit-interval=5000ms
#心跳与消费者协调员之间的预期时间（毫秒），默认3000，这个值必须设置的小于session.timeout.ms，通常设置的值要低于session.timeout.ms的1/3。
spring.kafka.consumer.heartbeat-interval=3000ms
#当Kafka中没有初始偏移量或者服务器上不再存在当前偏移量时该怎么办，默认值为latest，表示自动将偏移重置为最新的偏移量
#可选的值为latest, earliest, none
spring.kafka.consumer.auto-offset-reset=latest
#检测消费者失败的超时，10000，这个值必须设置在broker configuration中的group.min.session.timeout.ms 与 group.max.session.timeout.ms之间。
#spring.session.timeout=10000ms

#spring.kafka.properties

#在一次调用poll（）中返回的最大记录数。默认值500
spring.kafka.consumer.max-poll-records=500
#max.poll.interval.ms，在使用消费者组管理时，调用poll（）之间的最大延迟。这提出了消费者在获取更多记录之前可以闲置的时间量的上界。如果在此超时到期之前未调用poll（），则认为使用者失败，并且组将重新平衡以将分区重新分配给其他成员。
#默认300000，5分钟
spring.kafka.consumer.properties.max.poll.interval.ms=300000
#ID在发出请求时传递给服务器;用于服务器端日志记录。
#spring.kafka.consumer.client-id;

#如果没有足够的数据立即满足“fetch.min.bytes”给出的要求，服务器在回答获取请求之前将阻塞的最长时间（以毫秒为单位）
#默认值为500 毫秒
#fetch.min.bytes参数指定了消费者读取的最小数据量，而这个参数则指定了消费者读取时最长等待时间，从而避免长时间阻塞。这个参数默认为500ms。
spring.kafka.consumer.fetch-max-wait=500

#服务器应以字节为单位返回获取请求的最小数据量，默认值为1，对应的kafka的参数为fetch.min.bytes。
#这个参数允许消费者指定从broker读取消息时最小的Payload的字节数。
# 当消费者从broker读取消息时，如果数据字节数小于这个阈值，broker会等待直到有足够的数据，然后才返回给消费者。
# 对于写入量不高的主题来说，这个参数可以减少broker和消费者的压力，因为减少了往返的时间。而对于有大量消费者的主题来说，则可以明显减轻broker压力。
spring.kafka.consumer.fetch-min-size=1

#用于标识此使用者所属的使用者组的唯一字符串。
#spring.kafka.consumer.group-id;

#密钥的反序列化器类，实现类实现了接口org.apache.kafka.common.serialization.Deserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#值的反序列化器类，实现类实现了接口org.apache.kafka.common.serialization.Deserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer


################################## listener的配置参数（结束）##################################
#侦听器的AckMode,参见https://docs.spring.io/spring-kafka/reference/htmlsingle/#committing-offsets
#当enable.auto.commit的值设置为false时，该值会生效；为true时不会生效，listener负责ack，背后也是批量上去，手动提交offset需要的配置
#RECORD :当listener一读到消息，就提交offset
#BATCH : poll() 函数读取到的所有消息,就提交offset
#TIME : 当超过设置的ackTime ，即提交Offset
#COUNT ：当超过设置的COUNT，即提交Offset
#COUNT_TIME ：TIME和COUNT两个条件都满足，提交offset
#MANUAL ： Acknowledgment.acknowledge()即提交Offset，和Batch类似
#MANUAL_IMMEDIATE： Acknowledgment.acknowledge()被调用即提交Offset
spring.kafka.listener.ack-mode=MANUAL
#在侦听器容器中运行的线程数,多线程消费
spring.kafka.listener.concurrency=6
#是否设置为批量消费，默认是否
spring.kafka.listener.type=batch
#轮训消费者时的超时时间，ms,10000ms
spring.kafka.listener.poll-timeout=10000ms
#监控间隔时间,10000ms
spring.kafka.listener.monitor-interval=10000ms
#当ackMode为“COUNT”或“COUNT_TIME”时，偏移提交之间的记录数
spring.kafka.listener.ack-count=
#当ackMode为“TIME”或“COUNT_TIME”时，偏移提交之间的时间（以毫秒为单位）
spring.kafka.listener.ack-time=



#日志,设置日志级别 为 debug,, debug < info < warn < error < fatal
logging.level.root=info



